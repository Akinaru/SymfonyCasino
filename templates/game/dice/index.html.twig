{% extends 'game/base_game.html.twig' %}

{% block game_title %}ðŸŽ° Symfsino - Coin Flip (Pile ou Face){% endblock %}

{% block game_styles %}
    <style>
        .coin {
            width: 96px; height: 96px;
            display: grid; place-items: center;
            border-radius: 12px;
            background: #1f1f1f; border: 1px solid #444;
            transition: transform .15s ease;
        }
        .coin img {
            width: 90px; height: 90px;
            object-fit: contain;
            image-rendering: pixelated;
            display: block;
        }
        .coin.spin { animation: spin .8s cubic-bezier(.2,.8,.2,1) 1; }
        @keyframes spin {
            0%   { transform: rotateY(0deg)    scale(1.0); }
            50%  { transform: rotateY(540deg)  scale(1.06); }
            100% { transform: rotateY(1080deg) scale(1.0); }
        }
    </style>
{% endblock %}

{% block game_sidebar %}
    <div class="card bg-dark border-secondary text-light">
        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
            <span class="h5 mb-0">Pile ou Face</span>
            <small>Min {{ minBet|default(1) }} Â· Max {{ maxBet|default(1000) }}</small>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Balance</label>
                <div class="fs-4 balance justify-content-start" id="balanceDisplay">{{ app.user.balance }}</div>
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <div>{{ descriptionInGame }}</div>
            </div>

            <div class="mb-3">
                <label for="betInput" class="form-label">Montant du pari</label>
                <input id="betInput" type="number" class="form-control"
                       min="{{ minBet|default(1) }}" max="{{ maxBet|default(1000) }}"
                       value="{{ minBet|default(1) }}">
            </div>

            <button id="playBtn" class="btn btn-primary w-100">Jouer</button>
        </div>
    </div>
{% endblock %}

{% block game_playfield %}
    <div class="card bg-dark border-secondary text-light">
        <div class="card-header border-secondary">
            <span class="h6 mb-0">Jeu</span>
        </div>
        <div class="card-body">
            <div class="d-flex flex-column align-items-center gap-4 my-2">
                <div>
                    <div id="status" class="small">En attente...</div>
                    <div id="result" class="fs-4 fw-bold"></div>
                </div>

                <div id="coin" class="coin">
                    <img id="coinImg" src="{{ asset('img/dice/pile.png') }}" alt="Pile">
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block game_scripts %}
    <script type="module">
        (function () {
            let wired = false;

            function initCoinFlip() {
                if (wired) return;

                const playBtn   = document.getElementById('playBtn');
                const betInput  = document.getElementById('betInput');
                const coinEl    = document.getElementById('coin');
                const coinImg   = document.getElementById('coinImg');
                const statusEl  = document.getElementById('status');
                const resultEl  = document.getElementById('result');
                const balanceEl = document.getElementById('balanceDisplay');

                if (!playBtn || !betInput || !coinEl || !coinImg || !statusEl || !resultEl || !balanceEl) return;
                wired = true;

                const endpoint = "{{ path('app_game_dice_play') }}";
                const csrf     = "{{ csrf_token('dice_play') }}";

                const pileSrc  = "{{ asset('img/dice/pile.png') }}";
                const faceSrc  = "{{ asset('img/dice/face.png') }}";

                const sleep = (ms) => new Promise(r => setTimeout(r, ms));

                function setBtnDisabled(disabled) {
                    const btn = document.getElementById('playBtn');
                    if (!btn) return;
                    if (disabled) {
                        btn.disabled = true;
                        btn.setAttribute('disabled', 'disabled');
                        btn.classList.add('disabled');
                        btn.setAttribute('aria-disabled', 'true');
                    } else {
                        btn.disabled = false;
                        btn.removeAttribute('disabled');
                        btn.classList.remove('disabled');
                        btn.setAttribute('aria-disabled', 'false');
                    }
                }

                // DÃ©termination du rÃ©sultat cÃ´tÃ© front :
                // - Si win => toujours "face"
                // - Si lose => toujours "pile"
                function applyResultFromData(data, amount) {
                    // data.win peut exister, sinon on tombe sur payout>0
                    const isWin = (typeof data.win === 'boolean') ? data.win : (Number(data.payout) > 0);

                    // Animation dÃ©jÃ  lancÃ©e : on attend un peu pour l'effet
                    return sleep(450).then(() => {
                        const side = isWin ? 'face' : 'pile';
                        if (side === 'face') {
                            coinImg.src = faceSrc;
                            coinImg.alt = 'Face';
                        } else {
                            coinImg.src = pileSrc;
                            coinImg.alt = 'Pile';
                        }

                        statusEl.textContent = 'RÃ©sultat : ' + (side === 'face' ? 'Face' : 'Pile');
                        resultEl.textContent = isWin
                            ? `Tu as gagnÃ© ${data.payout}`
                            : `Tu as perdu ${amount}`;

                        if (typeof data.balance !== 'undefined') {
                            balanceEl.textContent = data.balance;
                        }
                    });
                }

                async function play(ev) {
                    if (ev && typeof ev.preventDefault === 'function') ev.preventDefault();

                    const amount = parseInt(betInput.value, 10) || 0;
                    resultEl.textContent = '';
                    statusEl.textContent = 'Lancement...';
                    setBtnDisabled(true);

                    // (Re)lancer l'animation de flip
                    coinEl.classList.remove('spin'); void coinEl.offsetWidth; coinEl.classList.add('spin');

                    try {
                        const res  = await fetch(endpoint, {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({ amount, _token: csrf })
                        });

                        const data = await res.json();

                        if (!data.ok) {
                            statusEl.textContent = data.error || 'Erreur';
                            return;
                        }

                        await applyResultFromData(data, amount);

                    } catch (e) {
                        console.warn('[coin] play error:', e);
                        statusEl.textContent = 'Network error.';
                    } finally {
                        setBtnDisabled(false);
                    }
                }

                playBtn.addEventListener('click', play);
            }

            document.addEventListener('DOMContentLoaded', initCoinFlip);
            document.addEventListener('turbo:load', initCoinFlip);
        })();
    </script>
{% endblock %}
