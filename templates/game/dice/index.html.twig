{% extends 'game/base_game.html.twig' %}

{% block game_title %}üé∞ Symfsino - Dice{% endblock %}

{% block game_styles %}
    <link rel="stylesheet" href="{{ asset('styles/game/dice.css') }}">
{% endblock %}

{% block game_sidebar %}
    <div class="card info-card text-light h-100">
        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
            <span class="typo-title mb-0">Pile ou Face</span>
            <small class="typo-helper">Min {{ minBet|default(1) }} ¬∑ Max {{ maxBet|default(1000) }}</small>
        </div>
        <div class="card-body form-compact">
            <div class="mb-3">
                <div class="typo-eyebrow">Balance</div>
                <div id="balanceDisplay" class="typo-kpi balance justify-content-start">{{ app.user.balance }}</div>
            </div>

            <div class="mb-3">
                <div class="typo-eyebrow">Description</div>
                <p class="mb-0 typo-helper">{{ descriptionInGame }}</p>
            </div>

            <div class="mb-3">
                <label for="betInput" class="form-label">Montant du pari</label>
                <input id="betInput" type="number" class="form-control"
                       min="{{ minBet|default(1) }}" max="{{ maxBet|default(1000) }}"
                       value="{{ minBet|default(1) }}">
                <div class="form-text text-secondary">Jouez de mani√®re responsable.</div>
            </div>

            <div class="d-grid gap-2 mb-3">
                <button id="playBtn" class="btn btn-primary">Jouer</button>
            </div>

            <hr class="border-secondary">

            <div class="mb-2">
                <div class="typo-eyebrow">Auto-roll</div>
            </div>
            <div class="row g-2 align-items-end mb-2">
                <div class="col-6">
                    <label for="autoCount" class="form-label mb-1">Nombre de lancers</label>
                    <input id="autoCount" type="number" class="form-control" min="1" value="10">
                </div>
                <div class="col-6 d-grid">
                    <button id="autoStartBtn" class="btn btn-outline-light">Lancer l‚Äôauto-roll</button>
                </div>
            </div>
            <div class="d-grid">
                <button id="autoStopBtn" class="btn btn-outline-danger" disabled>Stop</button>
            </div>
            <div class="mt-2">
                <small id="autoStatus" class="text-white-50">Auto : inactif</small>
            </div>
        </div>
    </div>
{% endblock %}

{% block game_playfield %}
    <div class="card game-card text-light h-100">
        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
            <span class="typo-title mb-0">Zone de jeu</span>
        </div>

        <div class="card-body">
            <div class="playfield-area">
                <div class="d-flex flex-column align-items-center gap-3">
                    <div class="status-row">
                        <div id="result" class="typo-kpi">En attente‚Ä¶</div>
                    </div>

                    <div id="coin" class="coin">
                        <img id="coinImg" src="{{ asset('img/dice/wait.png') }}" alt="Attente">
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block more_content %}
    <div class="info-card card text-light mb-3">
        <div class="card-header border-secondary">
            <span class="typo-title">√Ä propos du jeu</span>
        </div>
        <div class="card-body">
            <p class="mb-2 typo-helper">
                Pile ou Face est un jeu √† <strong>r√©sultat binaire</strong> : gain ou perte selon l‚Äôissue. L‚Äôinterface force l‚Äôaffichage
                <em>Face</em> en cas de gain et <em>Pile</em> en cas de perte pour une lecture imm√©diate.
            </p>
            <ul class="mb-0">
                <li>
                    <img src="{{ asset('img/dice/face.png') }}" alt="Face" width="18" height="18" class="me-2 align-text-bottom">
                    Issue <strong>Face</strong> : paiement standard (ex. x2).
                </li>
                <li class="mt-1">
                    <img src="{{ asset('img/dice/pile.png') }}" alt="Pile" width="18" height="18" class="me-2 align-text-bottom">
                    Issue <strong>Pile</strong> : pari perdu.
                </li>
            </ul>
        </div>
    </div>

    <div class="info-card card text-light mb-3">
        <div class="card-header border-secondary">
            <span class="typo-title">Table des gains (exemple)</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-dark table-striped align-middle payout-table mb-0">
                    <thead>
                    <tr>
                        <th>Issue</th>
                        <th>Paiement</th>
                        <th>Notes</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>
                            <img src="{{ asset('img/dice/face.png') }}" alt="Face" width="18" height="18" class="me-2 align-text-bottom">
                            Face (gain)
                        </td>
                        <td>x2 la mise</td>
                        <td>Plafonn√© par la limite de table</td>
                    </tr>
                    <tr>
                        <td>
                            <img src="{{ asset('img/dice/pile.png') }}" alt="Pile" width="18" height="18" class="me-2 align-text-bottom">
                            Pile (perte)
                        </td>
                        <td>0</td>
                        <td>La mise est perdue</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="info-card card text-light mb-3">
        <div class="card-header border-secondary">
            <span class="typo-title">R√®gles & Conseils</span>
        </div>
        <div class="card-body">
            <ul class="mb-2">
                <li>Mises min./max. : <strong>{{ minBet|default(1) }}</strong> / <strong>{{ maxBet|default(1000) }}</strong>.</li>
                <li>R√©sultats d√©termin√©s c√¥t√© serveur ‚Äî l‚Äôanimation est un <em>feedback visuel</em>.</li>
                <li>Bonus/Promotions soumis √† conditions (ex. wagering).</li>
            </ul>
            <p class="mb-0 typo-helper">
                Jouez de mani√®re responsable. Fixez-vous des limites et faites des pauses r√©guli√®res.
            </p>
        </div>
    </div>

    <div class="info-card card text-light">
        <div class="card-header border-secondary">
            <span class="typo-title">Informations L√©gales</span>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <h6 class="mb-1">Conformit√©</h6>
                    <p class="mb-0 typo-helper">Mentions l√©gales, licence, r√©gulation, politique KYC/AML, etc.</p>
                </div>
                <div class="col-12 col-md-6">
                    <h6 class="mb-1">Aide & Support</h6>
                    <p class="mb-1 typo-helper">FAQ, contact support, m√©diation, limites de d√©p√¥t.</p>
                    <a href="#" class="btn btn-outline-light btn-sm">Centre d‚Äôaide</a>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block game_scripts %}
    <script type="module">
        (function () {
            let wired = false;
            let autoState = { active: false, total: 0, remaining: 0, stopFlag: false };

            function initCoinFlip() {
                if (wired) return;

                const playBtn    = document.getElementById('playBtn');
                const betInput   = document.getElementById('betInput');
                const coinEl     = document.getElementById('coin');
                const coinImg    = document.getElementById('coinImg');
                const resultEl   = document.getElementById('result');
                const balanceEl  = document.getElementById('balanceDisplay');

                const autoCount  = document.getElementById('autoCount');
                const autoStart  = document.getElementById('autoStartBtn');
                const autoStop   = document.getElementById('autoStopBtn');
                const autoStatus = document.getElementById('autoStatus');

                if (!playBtn || !betInput || !coinEl || !coinImg || !resultEl || !balanceEl || !autoCount || !autoStart || !autoStop || !autoStatus) return;
                wired = true;

                const endpoint = "{{ path('app_game_dice_play') }}";
                const csrf     = "{{ csrf_token('dice_play') }}";

                const waitSrc  = "{{ asset('img/dice/wait.png') }}";
                const pileSrc  = "{{ asset('img/dice/pile.png') }}";
                const faceSrc  = "{{ asset('img/dice/face.png') }}";

                coinImg.src = waitSrc;
                coinImg.alt = 'Attente';
                resultEl.textContent = resultEl.textContent?.trim() || 'En attente‚Ä¶';

                const sleep = (ms) => new Promise(r => setTimeout(r, ms));

                function setBtnDisabled(disabled) {
                    playBtn.disabled = !!disabled;
                    playBtn.classList.toggle('disabled', !!disabled);
                    playBtn.setAttribute('aria-disabled', disabled ? 'true' : 'false');
                }

                function setAutoControls(active) {
                    autoState.active = active;
                    autoStop.disabled = !active;
                    autoStart.disabled = !!active;
                    betInput.disabled = !!active;
                    setBtnDisabled(active);
                }

                function setStatus(text) { autoStatus.textContent = text; }
                function setResult(text) { if (text && text.trim() !== '') resultEl.textContent = text; }
                function resetVisual() {
                    coinEl.classList.remove('spin');
                    coinImg.src = waitSrc; coinImg.alt = 'Attente';
                }

                async function apiPlay(amount) {
                    const res  = await fetch(endpoint, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ amount, _token: csrf })
                    });
                    const data = await res.json().catch(() => null);
                    if (!res.ok || !data || data.ok === false) {
                        const msg = (data && typeof data.error === 'string' && data.error.trim() !== '') ? data.error : `Erreur (${res.status})`;
                        throw new Error(msg);
                    }
                    return data;
                }

                function animateSpin() {
                    coinEl.classList.remove('spin'); void coinEl.offsetWidth; coinEl.classList.add('spin');
                }

                async function applyResultFromData(data, amount) {
                    const isWin = (typeof data.win === 'boolean') ? data.win : (Number(data.payout) > 0);
                    await sleep(450);
                    const side = isWin ? 'face' : 'pile';
                    coinImg.src = side === 'face' ? faceSrc : pileSrc;
                    coinImg.alt = side === 'face' ? 'Face' : 'Pile';
                    setResult(isWin ? `Tu as gagn√© ${data.payout}` : `Tu as perdu ${amount}`);
                    if (typeof data.balance !== 'undefined') {
                        balanceEl.textContent = data.balance;
                    }
                }

                async function playOnce(amount) {
                    setResult('Lancement‚Ä¶');
                    animateSpin();
                    const data = await apiPlay(amount);
                    await applyResultFromData(data, amount);
                }

                async function handleManualPlay(ev) {
                    if (ev) ev.preventDefault();
                    if (autoState.active) return;
                    const amount = parseInt(betInput.value, 10) || 0;
                    setBtnDisabled(true);
                    try {
                        await playOnce(amount);
                    } catch (e) {
                        resetVisual();
                        setResult(e.message || 'Erreur inconnue');
                    } finally {
                        setBtnDisabled(false);
                    }
                }

                async function runAuto() {
                    const amount = parseInt(betInput.value, 10) || 0;
                    autoState.stopFlag = false;
                    setAutoControls(true);
                    while (autoState.remaining > 0 && !autoState.stopFlag) {
                        const idx = autoState.total - autoState.remaining + 1;
                        setStatus(`Auto : lancer ${idx} / ${autoState.total}`);
                        try {
                            await playOnce(amount);
                        } catch (e) {
                            resetVisual();
                            setResult(e.message || 'Erreur');
                            break;
                        }
                        autoState.remaining--;
                        if (autoState.remaining > 0 && !autoState.stopFlag) {
                            await sleep(500);
                        }
                    }
                    setStatus('Auto : termin√©');
                    setAutoControls(false);
                }

                function onAutoStart(ev) {
                    if (ev) ev.preventDefault();
                    if (autoState.active) return;
                    const n = Math.max(1, parseInt(autoCount.value, 10) || 0);
                    autoState.total = n;
                    autoState.remaining = n;
                    setStatus(`Auto : pr√™t (${n} lancers)`);
                    runAuto();
                }

                function onAutoStop(ev) {
                    if (ev) ev.preventDefault();
                    if (!autoState.active) return;
                    autoState.stopFlag = true;
                    setStatus('Auto : arr√™t demand√©‚Ä¶');
                }

                playBtn.addEventListener('click', handleManualPlay);
                autoStart.addEventListener('click', onAutoStart);
                autoStop.addEventListener('click', onAutoStop);
            }

            document.addEventListener('DOMContentLoaded', initCoinFlip);
            document.addEventListener('turbo:load', initCoinFlip);
        })();
    </script>
{% endblock %}
