{% extends 'game/base_game.html.twig' %}

{% block game_title %}Dice â€” d{% endblock %}

{% block game_styles %}
    <style>
        .dice {
            width: 90px; height: 90px;
            display: grid; place-items: center;
            font-size: 56px; border-radius: 12px;
            background: #1f1f1f; border: 1px solid #444;
            transition: transform .15s ease;
        }
        .dice.spin { animation: spin .8s cubic-bezier(.2,.8,.2,1) 1; }
        @keyframes spin {
            0% { transform: rotate(0deg)   scale(1.0); }
            30%{ transform: rotate(120deg) scale(1.08); }
            60%{ transform: rotate(240deg) scale(1.08); }
            100%{ transform: rotate(360deg) scale(1.0); }
        }
    </style>
{% endblock %}

{% block game_sidebar %}
    <div class="card bg-dark border-secondary text-light">
        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
            <span class="h5 mb-0">Dice</span>
            <small class="">Min {{ minBet|default(1) }} Â· Max {{ maxBet|default(1000) }}</small>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Balance</label>
                <div class="fs-4 balance justify-content-start" id="balanceDisplay">{{ app.user.balance }}</div>
            </div>

            <div class="mb-3">
                <label for="betInput" class="form-label">Montant du pari</label>
                <input id="betInput" type="number" class="form-control"
                       min="{{ minBet|default(1) }}" max="{{ maxBet|default(1000) }}"
                       value="{{ minBet|default(1) }}">
            </div>

            <button id="playBtn" class="btn btn-primary w-100">Roll</button>
        </div>
    </div>
{% endblock %}

{% block game_playfield %}
    <div class="card bg-dark border-secondary text-light">
        <div class="card-header border-secondary">
            <span class="h6 mb-0">Jeu</span>
        </div>
        <div class="card-body">
            <div class="d-flex flex-column align-items-center gap-4 my-2">
                <div>
                    <div id="status" class="small">Ready.</div>
                    <div id="result" class="fs-4 fw-bold"></div>
                </div>
                <div id="dice" class="dice">ðŸŽ²</div>

            </div>
        </div>
    </div>
{% endblock %}

{% block game_scripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const playBtn   = document.getElementById('playBtn');
            const betInput  = document.getElementById('betInput');
            const diceEl    = document.getElementById('dice');
            const statusEl  = document.getElementById('status');
            const resultEl  = document.getElementById('result');
            const balanceEl = document.getElementById('balanceDisplay');

            if (!playBtn || !betInput || !diceEl || !statusEl || !resultEl || !balanceEl) {
                console.warn('[dice] Missing DOM elements, script aborted.');
                return;
            }

            const endpoint  = "{{ path('app_game_dice_play') }}";
            const csrf      = "{{ csrf_token('dice_play') }}";

            const face = (n) => n;

            async function play() {
                const amount = parseInt(betInput.value, 10) || 0;
                resultEl.textContent = '';
                statusEl.textContent = 'Rolling...';
                playBtn.disabled = true;
                diceEl.classList.remove('spin'); void diceEl.offsetWidth; diceEl.classList.add('spin');

                try {
                    const res  = await fetch(endpoint, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ amount, _token: csrf })
                    });
                    const data = await res.json();

                    if (!data.ok) {
                        statusEl.textContent = data.error || 'Error';
                        playBtn.disabled = false;
                        return;
                    }

                    setTimeout(() => {
                        diceEl.textContent = face(data.roll);
                        statusEl.textContent = 'Result: ' + data.roll;
                        resultEl.textContent = data.payout > 0
                            ? `You won +${data.payout}!`
                            : `You lost -${amount}.`;
                        balanceEl.textContent = data.balance;
                        playBtn.disabled = false;
                    }, 450);

                } catch(e) {
                    statusEl.textContent = 'Network error.';
                    playBtn.disabled = false;
                }
            }

            playBtn.addEventListener('click', play);
        });
    </script>
{% endblock %}

