
{% extends 'game/base_game.html.twig' %}

{% block game_title %}🎰 Symfsino - Dice{% endblock %}


{# —— STYLES (visuel uniquement) —— #}
{% block game_styles %}
    <link rel="stylesheet" href="{{ asset('styles/game/dice.css') }}">
{% endblock %}

{# ————— SIDEBAR ————— #}
{% block game_sidebar %}
    <div class="card info-card text-light h-100">
        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
            <span class="typo-title mb-0">Pile ou Face</span>
            <small class="typo-helper">Min {{ minBet|default(1) }} · Max {{ maxBet|default(1000) }}</small>
        </div>
        <div class="card-body form-compact">
            <div class="mb-3">
                <div class="typo-eyebrow">Balance</div>
                <div id="balanceDisplay" class="typo-kpi balance justify-content-start">{{ app.user.balance }}</div>
            </div>

            <div class="mb-3">
                <div class="typo-eyebrow">Description</div>
                <p class="mb-0 typo-helper">{{ descriptionInGame }}</p>
            </div>

            <div class="mb-3">
                <label for="betInput" class="form-label">Montant du pari</label>
                <input id="betInput" type="number" class="form-control"
                       min="{{ minBet|default(1) }}" max="{{ maxBet|default(1000) }}"
                       value="{{ minBet|default(1) }}">
                <div class="form-text text-secondary">Jouez de manière responsable.</div>
            </div>

            <button id="playBtn" class="btn btn-primary w-100">Jouer</button>
        </div>
    </div>
{% endblock %}

{# ————— PLAYFIELD ————— #}
{% block game_playfield %}
    <div class="card game-card text-light h-100">
        <div class="card-header border-secondary d-flex justify-content-between align-items-center">
            <span class="typo-title mb-0">Zone de jeu</span>
        </div>

        <div class="card-body">
            <div class="playfield-area">
                <div class="d-flex flex-column align-items-center gap-3">
                    <div class="status-row">
                        <div id="result" class="typo-kpi">En attente…</div>
                    </div>

                    <div id="coin" class="coin">
                        {# 👉 Image d’attente au chargement #}
                        <img id="coinImg" src="{{ asset('img/dice/wait.png') }}" alt="Attente">
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}


{% block more_content %}
    <div class="info-card card text-light mb-3">
        <div class="card-header border-secondary">
            <span class="typo-title">À propos du jeu</span>
        </div>
        <div class="card-body">
            <p class="mb-2 typo-helper">
                Pile ou Face est un jeu à <strong>résultat binaire</strong> : gain ou perte selon l’issue. L’interface force l’affichage
                <em>Face</em> en cas de gain et <em>Pile</em> en cas de perte pour une lecture immédiate.
            </p>
            <ul class="mb-0">
                <li>
                    <img src="{{ asset('img/dice/face.png') }}" alt="Face" width="18" height="18" class="me-2 align-text-bottom">
                    Issue <strong>Face</strong> : paiement standard (ex. x2).
                </li>
                <li class="mt-1">
                    <img src="{{ asset('img/dice/pile.png') }}" alt="Pile" width="18" height="18" class="me-2 align-text-bottom">
                    Issue <strong>Pile</strong> : pari perdu.
                </li>
            </ul>
        </div>
    </div>

    <div class="info-card card text-light mb-3">
        <div class="card-header border-secondary">
            <span class="typo-title">Table des gains (exemple)</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-dark table-striped align-middle payout-table mb-0">
                    <thead>
                    <tr>
                        <th>Issue</th>
                        <th>Paiement</th>
                        <th>Notes</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>
                            <img src="{{ asset('img/dice/face.png') }}" alt="Face" width="18" height="18" class="me-2 align-text-bottom">
                            Face (gain)
                        </td>
                        <td>x2 la mise</td>
                        <td>Plafonné par la limite de table</td>
                    </tr>
                    <tr>
                        <td>
                            <img src="{{ asset('img/dice/pile.png') }}" alt="Pile" width="18" height="18" class="me-2 align-text-bottom">
                            Pile (perte)
                        </td>
                        <td>0</td>
                        <td>La mise est perdue</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="info-card card text-light mb-3">
        <div class="card-header border-secondary">
            <span class="typo-title">Règles & Conseils</span>
        </div>
        <div class="card-body">
            <ul class="mb-2">
                <li>Mises min./max. : <strong>{{ minBet|default(1) }}</strong> / <strong>{{ maxBet|default(1000) }}</strong>.</li>
                <li>Résultats déterminés côté serveur — l’animation est un <em>feedback visuel</em>.</li>
                <li>Bonus/Promotions soumis à conditions (ex. wagering).</li>
            </ul>
            <p class="mb-0 typo-helper">
                Jouez de manière responsable. Fixez-vous des limites et faites des pauses régulières.
            </p>
        </div>
    </div>

    <div class="info-card card text-light">
        <div class="card-header border-secondary">
            <span class="typo-title">Informations Légales</span>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <h6 class="mb-1">Conformité</h6>
                    <p class="mb-0 typo-helper">Mentions légales, licence, régulation, politique KYC/AML, etc.</p>
                </div>
                <div class="col-12 col-md-6">
                    <h6 class="mb-1">Aide & Support</h6>
                    <p class="mb-1 typo-helper">FAQ, contact support, médiation, limites de dépôt.</p>
                    <a href="#" class="btn btn-outline-light btn-sm">Centre d’aide</a>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{# ————— SCRIPTS ————— #}
{% block game_scripts %}
    <script type="module">
        (function () {
            let wired = false;

            function initCoinFlip() {
                if (wired) return;

                const playBtn   = document.getElementById('playBtn');
                const betInput  = document.getElementById('betInput');
                const coinEl    = document.getElementById('coin');
                const coinImg   = document.getElementById('coinImg');
                const resultEl  = document.getElementById('result');
                const balanceEl = document.getElementById('balanceDisplay');

                if (!playBtn || !betInput || !coinEl || !coinImg || !resultEl || !balanceEl) return;
                wired = true;

                const endpoint = "{{ path('app_game_dice_play') }}";
                const csrf     = "{{ csrf_token('dice_play') }}";

                const waitSrc  = "{{ asset('img/dice/wait.png') }}";
                const pileSrc  = "{{ asset('img/dice/pile.png') }}";
                const faceSrc  = "{{ asset('img/dice/face.png') }}";

                // 👉 Forcer l’état visuel “En attente” au premier chargement
                coinImg.src = waitSrc;
                coinImg.alt = 'Attente';
                resultEl.textContent = resultEl.textContent?.trim() || 'En attente…';

                const sleep = (ms) => new Promise(r => setTimeout(r, ms));

                function setBtnDisabled(disabled) {
                    if (disabled) {
                        playBtn.disabled = true;
                        playBtn.classList.add('disabled');
                        playBtn.setAttribute('aria-disabled', 'true');
                    } else {
                        playBtn.disabled = false;
                        playBtn.classList.remove('disabled');
                        playBtn.setAttribute('aria-disabled', 'false');
                    }
                }

                function setResult(text) {
                    if (typeof text === 'string' && text.trim() !== '') {
                        resultEl.textContent = text;
                    }
                }

                function showError(msg) {
                    coinEl.classList.remove('spin');
                    setResult(msg || 'Erreur inconnue');
                }

                function applyResultFromData(data, amount) {
                    const isWin = (typeof data.win === 'boolean') ? data.win : (Number(data.payout) > 0);

                    return sleep(450).then(() => {
                        const side = isWin ? 'face' : 'pile';
                        if (side === 'face') {
                            coinImg.src = faceSrc;
                            coinImg.alt = 'Face';
                        } else {
                            coinImg.src = pileSrc;
                            coinImg.alt = 'Pile';
                        }

                        setResult(isWin ? `Tu as gagné ${data.payout}` : `Tu as perdu ${amount}`);

                        if (typeof data.balance !== 'undefined') {
                            balanceEl.textContent = data.balance;
                        }
                    });
                }

                async function play(ev) {
                    if (ev && typeof ev.preventDefault === 'function') ev.preventDefault();

                    const amount = parseInt(betInput.value, 10) || 0;

                    setResult('Lancement…');
                    setBtnDisabled(true);

                    coinEl.classList.remove('spin'); void coinEl.offsetWidth; coinEl.classList.add('spin');

                    try {
                        const res  = await fetch(endpoint, {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({ amount, _token: csrf })
                        });

                        const text = await res.text();
                        let data = null;
                        try { data = JSON.parse(text); } catch (_) {}

                        if (!res.ok || !data || data.ok === false) {
                            const msg =
                                (data && typeof data.error === 'string' && data.error.trim() !== '')
                                    ? data.error
                                    : `Erreur (${res.status})`;
                            showError(msg);
                            return;
                        }

                        await applyResultFromData(data, amount);

                    } catch (e) {
                        console.warn('[coin] play error:', e);
                        showError('Erreur réseau.');
                    } finally {
                        setBtnDisabled(false);
                    }
                }

                playBtn.addEventListener('click', play);
            }

            document.addEventListener('DOMContentLoaded', initCoinFlip);
            document.addEventListener('turbo:load', initCoinFlip);
        })();
    </script>
{% endblock %}

